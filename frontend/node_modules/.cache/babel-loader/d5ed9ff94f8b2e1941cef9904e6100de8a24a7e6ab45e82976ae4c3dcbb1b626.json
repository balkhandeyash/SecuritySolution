{"ast":null,"code":"var _jsxFileName = \"/Users/yashbalkhande/pythonreactintegration/major-project copy 2/frontend/src/Dashboard.js\",\n  _s = $RefreshSig$();\n// Dashboard.js\nimport React, { useState, useEffect } from \"react\";\nimport \"./Dashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const jobsPerPage = 15;\n\n  // Dummy data for jobs (replace this with your actual job data)\n  const dummyJobs = Array.from({\n    length: 50\n  }, (_, index) => ({\n    id: index + 1,\n    title: `Job ${index + 1}`,\n    company: `Company ${index + 1}`,\n    location: `Location ${index + 1}`,\n    description: `Description for Job ${index + 1}. This is a sample job description.`\n  }));\n\n  // Calculate the index range for jobs on the current page\n  const indexOfLastJob = currentPage * jobsPerPage;\n  const indexOfFirstJob = indexOfLastJob - jobsPerPage;\n  const currentJobs = jobs.slice(indexOfFirstJob, indexOfLastJob);\n  useEffect(() => {\n    // In a real-world scenario, fetch jobs from an API or a database\n    setJobs(dummyJobs);\n  }, []);\n  const handleNextPage = () => {\n    setCurrentPage(prevPage => prevPage + 1);\n  };\n  const handlePreviousPage = () => {\n    setCurrentPage(prevPage => prevPage - 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Dashboard-body\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Job Listings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"job-listing-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"job-grid\",\n        children: currentJobs.map(job => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"job-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: job.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: job.company\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: job.location\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"job-description\",\n            children: job.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this)]\n        }, job.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePreviousPage,\n          disabled: currentPage === 1,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: `Page ${currentPage}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextPage,\n          disabled: indexOfLastJob >= jobs.length,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"tVvkcMdonUGj2Jv5gKa++VlWdvI=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Dashboard","_s","jobs","setJobs","currentPage","setCurrentPage","jobsPerPage","dummyJobs","Array","from","length","_","index","id","title","company","location","description","indexOfLastJob","indexOfFirstJob","currentJobs","slice","handleNextPage","prevPage","handlePreviousPage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","job","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/yashbalkhande/pythonreactintegration/major-project copy 2/frontend/src/Dashboard.js"],"sourcesContent":["// Dashboard.js\nimport React, { useState, useEffect } from \"react\";\nimport \"./Dashboard.css\";\n\nconst Dashboard = () => {\n  const [jobs, setJobs] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const jobsPerPage = 15;\n\n  // Dummy data for jobs (replace this with your actual job data)\n  const dummyJobs = Array.from({ length: 50 }, (_, index) => ({\n    id: index + 1,\n    title: `Job ${index + 1}`,\n    company: `Company ${index + 1}`,\n    location: `Location ${index + 1}`,\n    description: `Description for Job ${index + 1}. This is a sample job description.`,\n  }));\n  \n\n  // Calculate the index range for jobs on the current page\n  const indexOfLastJob = currentPage * jobsPerPage;\n  const indexOfFirstJob = indexOfLastJob - jobsPerPage;\n  const currentJobs = jobs.slice(indexOfFirstJob, indexOfLastJob);\n\n  useEffect(() => {\n    // In a real-world scenario, fetch jobs from an API or a database\n    setJobs(dummyJobs);\n  }, []);\n\n  const handleNextPage = () => {\n    setCurrentPage((prevPage) => prevPage + 1);\n  };\n\n  const handlePreviousPage = () => {\n    setCurrentPage((prevPage) => prevPage - 1);\n  };\n\n  return (\n    <div className=\"Dashboard-body\">\n      <h2>Job Listings</h2>\n      <div className=\"job-listing-container\">\n        <div className=\"job-grid\">\n          {currentJobs.map((job) => (\n            <div key={job.id} className=\"job-card\">\n              <h3>{job.title}</h3>\n              <p>{job.company}</p>\n              <p>{job.location}</p>\n              <p className=\"job-description\">{job.description}</p>\n              {/* Add more job details as needed */}\n            </div>\n          ))}\n        </div>\n        <div className=\"pagination\">\n          <button onClick={handlePreviousPage} disabled={currentPage === 1}>\n            Previous\n          </button>\n          <span>{`Page ${currentPage}`}</span>\n          <button\n            onClick={handleNextPage}\n            disabled={indexOfLastJob >= jobs.length}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    </div>\n\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}