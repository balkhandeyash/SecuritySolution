{"ast":null,"code":"var _jsxFileName = \"/Users/yashbalkhande/pythonreactintegration/major-project/frontend/src/modules/Dashboard.js\",\n  _s = $RefreshSig$();\n// Dashboard.js\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./css/Dashboard.css\";\nimport JobDetailsCard from \"../JobDetailsCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedJob, setSelectedJob] = useState(null);\n  const jobsPerPage = 15;\n  const jobListingRef = useRef(null);\n\n  // Dummy data for jobs (replace this with your actual job data)\n  const dummyJobs = Array.from({\n    length: 50\n  }, (_, index) => ({\n    id: index + 1,\n    title: `Job ${index + 1}`,\n    company: `Company ${index + 1}`,\n    location: `Location ${index + 1}`,\n    description: `Description for Job ${index + 1}. This is a sample job description.`\n  }));\n\n  // Calculate the index range for jobs on the current page\n  const indexOfLastJob = currentPage * jobsPerPage;\n  const indexOfFirstJob = indexOfLastJob - jobsPerPage;\n  const currentJobs = jobs.slice(indexOfFirstJob, indexOfLastJob);\n  useEffect(() => {\n    // In a real-world scenario, fetch jobs from an API or a database\n    setJobs(dummyJobs);\n  }, []);\n  const handleNextPage = () => {\n    setCurrentPage(prevPage => prevPage + 1);\n    setSelectedJob(null); // Reset selected job when changing the page\n  };\n\n  const handlePreviousPage = () => {\n    setCurrentPage(prevPage => prevPage - 1);\n    setSelectedJob(null); // Reset selected job when changing the page\n  };\n\n  const handleJobClick = jobId => {\n    setSelectedJob(jobId);\n  };\n  const handleDocumentClick = event => {\n    if (jobListingRef.current && !jobListingRef.current.contains(event.target)) {\n      // Clicked outside the job listing container\n      setSelectedJob(null);\n    }\n  };\n  useEffect(() => {\n    document.addEventListener(\"click\", handleDocumentClick);\n    return () => {\n      document.removeEventListener(\"click\", handleDocumentClick);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Dashboard-body\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Job Listings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: jobListingRef,\n      className: `job-listing-container ${selectedJob ? \"zoomed\" : \"\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"job-grid\",\n        children: currentJobs.map(job => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `job-card ${selectedJob === job.id ? \"selected\" : \"\"}`,\n          onClick: () => handleJobClick(job.id),\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: job.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: job.company\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: job.location\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"job-description\",\n            children: job.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)]\n        }, job.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePreviousPage,\n          disabled: currentPage === 1,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: `Page ${currentPage}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextPage,\n          disabled: indexOfLastJob >= jobs.length,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), selectedJob && /*#__PURE__*/_jsxDEV(JobDetailsCard, {\n      job: jobs.find(job => job.id === selectedJob),\n      onClose: () => setSelectedJob(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"ffspH9yN0foaNY0IPLl4TWv4xMw=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","JobDetailsCard","jsxDEV","_jsxDEV","Dashboard","_s","jobs","setJobs","currentPage","setCurrentPage","selectedJob","setSelectedJob","jobsPerPage","jobListingRef","dummyJobs","Array","from","length","_","index","id","title","company","location","description","indexOfLastJob","indexOfFirstJob","currentJobs","slice","handleNextPage","prevPage","handlePreviousPage","handleJobClick","jobId","handleDocumentClick","event","current","contains","target","document","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","job","onClick","disabled","find","onClose","_c","$RefreshReg$"],"sources":["/Users/yashbalkhande/pythonreactintegration/major-project/frontend/src/modules/Dashboard.js"],"sourcesContent":["// Dashboard.js\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./css/Dashboard.css\";\nimport JobDetailsCard from \"../JobDetailsCard\";\n\nconst Dashboard = () => {\n  const [jobs, setJobs] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedJob, setSelectedJob] = useState(null);\n  const jobsPerPage = 15;\n  const jobListingRef = useRef(null);\n\n  // Dummy data for jobs (replace this with your actual job data)\n  const dummyJobs = Array.from({ length: 50 }, (_, index) => ({\n    id: index + 1,\n    title: `Job ${index + 1}`,\n    company: `Company ${index + 1}`,\n    location: `Location ${index + 1}`,\n    description: `Description for Job ${\n      index + 1\n    }. This is a sample job description.`,\n  }));\n\n  // Calculate the index range for jobs on the current page\n  const indexOfLastJob = currentPage * jobsPerPage;\n  const indexOfFirstJob = indexOfLastJob - jobsPerPage;\n  const currentJobs = jobs.slice(indexOfFirstJob, indexOfLastJob);\n\n  useEffect(() => {\n    // In a real-world scenario, fetch jobs from an API or a database\n    setJobs(dummyJobs);\n  }, []);\n\n  const handleNextPage = () => {\n    setCurrentPage((prevPage) => prevPage + 1);\n    setSelectedJob(null); // Reset selected job when changing the page\n  };\n\n  const handlePreviousPage = () => {\n    setCurrentPage((prevPage) => prevPage - 1);\n    setSelectedJob(null); // Reset selected job when changing the page\n  };\n\n  const handleJobClick = (jobId) => {\n    setSelectedJob(jobId);\n  };\n\n  const handleDocumentClick = (event) => {\n    if (\n      jobListingRef.current &&\n      !jobListingRef.current.contains(event.target)\n    ) {\n      // Clicked outside the job listing container\n      setSelectedJob(null);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"click\", handleDocumentClick);\n\n    return () => {\n      document.removeEventListener(\"click\", handleDocumentClick);\n    };\n  }, []);\n\n  return (\n    <div className=\"Dashboard-body\">\n      <h2>Job Listings</h2>\n      <div\n        ref={jobListingRef}\n        className={`job-listing-container ${selectedJob ? \"zoomed\" : \"\"}`}\n      >\n        <div className=\"job-grid\">\n          {currentJobs.map((job) => (\n            <div\n              key={job.id}\n              className={`job-card ${selectedJob === job.id ? \"selected\" : \"\"}`}\n              onClick={() => handleJobClick(job.id)}\n            >\n              <h3>{job.title}</h3>\n              <p>{job.company}</p>\n              <p>{job.location}</p>\n              <p className=\"job-description\">{job.description}</p>\n            </div>\n          ))}\n        </div>\n        <div className=\"pagination\">\n          <button onClick={handlePreviousPage} disabled={currentPage === 1}>\n            Previous\n          </button>\n          <span>{`Page ${currentPage}`}</span>\n          <button\n            onClick={handleNextPage}\n            disabled={indexOfLastJob >= jobs.length}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n\n      {selectedJob && (\n        <JobDetailsCard\n          job={jobs.find((job) => job.id === selectedJob)}\n          onClose={() => setSelectedJob(null)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}